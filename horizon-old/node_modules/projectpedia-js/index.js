var bot = require('nodemw');
const fs = require('fs');
var preans
var answer
var preans2
var answer2
var version = ""
var content
var returnVersion

var configVerbose = true
var funcEditPage = true
var funcAppendPage = true
var funcPrependPage = true
var funcRemovePage = true
var funcSendMail = true
var funcKernelVersion = true
var funcAnonLogin = true
var funcParsePages = true
var funcParseNamespacePages = true
var funcParsePageContent = true

exports.editPage = function(title,content,commit,minor) {
  if (funcEditPage === true) {
  try {
    if (minor == undefined) var minor = false
    if (commit == undefined) var commit = ""
    client.edit(title, content, commit, minor, function() {if (configVerbose === true) {console.log("[projectpedia-js] Modification apportée à la page " + title + "");}})
  }catch(err){
    console.error(err)
  }
}else{
  console.log("[projectpedia-js] Selon la configuration, la classe editPage() a été désactivée.")
}
}

exports.appendPage = function(title,content,commit) {
  if (funcAppendPage === true) {
  try {
    if (commit == undefined) var commit = ""
    client.append(title, content, commit, function() {if (configVerbose === true) {console.log("[projectpedia-js] Texte ajouté à la fin de la page " + title + "");}})
  }catch(err){
    console.error(err)
  }
}else{
  console.log("[projectpedia-js] Selon la configuration, la classe appendPage() a été désactivée.")
}
}

exports.prependPage = function(title,content,commit) {
  if (funcPrependPage === true) {
  try {
    if (commit == undefined) var commit = ""
    client.prepend(title, content, commit, function() {if (configVerbose === true) {console.log("[projectpedia-js] Texte ajouté au début de la page " + title + "");}})
  }catch(err){
    console.error(err)
  }
}else{
  console.log("[projectpedia-js] Selon la configuration, la classe prependPage() a été désactivée.")
}
}

exports.removePage = function(title,reason) {
  if (funcRemovePage === true) {
  try {
    if (reason == undefined) var reason = "[projectpedia-js] Aucun motif donné comme argument"
    client.delete(title, reason, function() {if (configVerbose === true) {console.log("[projectpedia-js] Page " + title + " supprimée");}})
  }catch(err){
    console.error(err)
  }
}else{
  console.log("[projectpedia-js] Selon la configuration, la classe removePage() a été désactivée.")
}
}

exports.sendMail = function(user,subject,text) {
  if (funcSendMail === true) {
  try {
    client.sendEmail(user, subject, text, function() {if (configVerbose === true) {console.log("[projectpedia-js] Message \"" + subject + "\" envoyé à " + user + "");}})
  }catch(err){
    console.error(err)
  }
}else{
  console.log("[projectpedia-js] Selon la configuration, la classe sendMail() a été désactivée.")
}
}

exports.login = function(login, password) {
  try {
    client = new bot({
      protocol: 'http',
      server: 'projectpedia.referata.com',
      path: '/w',
      debug: false
    });
    try {
      client.logIn(login, password, function() {
        loginOk();
        client.getMediaWikiVersion(function (err,e) {
          version = e
        })
      })
    } catch(err) {
      console.log("[projectpedia-js] Identifiants invalide, échec d'authentification")
    }
  } catch(err) {
    console.log("[projectpedia-js] ERREUR DE CONNEXION\n\n" + err);
  }
}

exports.config = function(property, value) {
  if (property == undefined || value == undefined) {console.log("[projectpedia-js] Opérande manquante")}else{
  if (property == "verbose") {
    if (value == false) { configVerbose = false }
    if (value == true) { configVerbose = true }
    console.log("[projectpedia-js] Propriété " + property + " définie à " + value + "")
  }
  if (property == "funcEditPage") {
    if (value == false) { funcEditPage = false }
    if (value == true) { funcEditPage = true }
    console.log("[projectpedia-js] Propriété " + property + " définie à " + value + "")
  }
  if (property == "funcAppendPage") {
    if (value == false) { funcAppendPage = false }
    if (value == true) { funcAppendPage = true }
    console.log("[projectpedia-js] Propriété " + property + " définie à " + value + "")
  }
  if (property == "funcPrependPage") {
    if (value == false) { funcPrependPage = false }
    if (value == true) { funcPrependPage = true }
    console.log("[projectpedia-js] Propriété " + property + " définie à " + value + "")
  }
  if (property == "funcRemovePage") {
    if (value == false) { funcRemovePage = false }
    if (value == true) { funcRemovePage = true }
    console.log("[projectpedia-js] Propriété " + property + " définie à " + value + "")
  }
  if (property == "funcSendMail") {
    if (value == false) { funcSendMail = false }
    if (value == true) { funcSendMail = true }
    console.log("[projectpedia-js] Propriété " + property + " définie à " + value + "")
  }
  if (property == "funcKernelVersion") {
    if (value == false) { funcKernelVersion = false }
    if (value == true) { funcKernel = true }
    console.log("[projectpedia-js] Propriété " + property + " définie à " + value + "")
  }
  if (property == "funcAnonLogin") {
    if (value == false) { funcAnonLogin = false }
    if (value == true) { funcAnonLogin = true }
    console.log("[projectpedia-js] Propriété " + property + " définie à " + value + "")
  }
  if (property == "funcParsePages") {
    if (value == false) { funcParsePages = false }
    if (value == true) { funcParsePages = true }
    console.log("[projectpedia-js] Propriété " + property + " définie à " + value + "")
  }
  if (property == "funcParseNamespacePages") {
    if (value == false) { funcParseNamespacePages = false }
    if (value == true) { funcParseNamespacePages = true }
    console.log("[projectpedia-js] Propriété " + property + " définie à " + value + "")
  }
  if (property == "funcParsePageContent") {
    if (value == false) { funcParsePageContent = false }
    if (value == true) { funcParsePageContent = true }
    console.log("[projectpedia-js] Propriété " + property + " définie à " + value + "")
  }
}}

exports.kernelVersion = function(returnVersion) {
  if (funcKernelVersion === true) {
  returnVersion = version;
  return returnVersion
}else{
  console.log("[projectpedia-js] Selon la configuration, la classe kernelVersion() a été désactivée.")
}
}

exports.anonLogin = function() {
  if (funcEditPage === true) {
  try {
    client = new bot({
      protocol: 'http',
      server: 'projectpedia.referata.com',
      path: '/w',
      debug: false
    });
    setTimeout(function() {
      client.getMediaWikiVersion(function (err,e) {
        version = e
      })
      loginOk();
    }, 4000)
  } catch(err) {
    if (configVerbose === true) {console.log("[projectpedia-js] ERREUR DE CONNEXION\n\n" + err);}
  }
}else{
  console.log("[projectpedia-js] Selon la configuration, la classe anonLogin() a été désactivée.")
}
}

exports.parsePageContent = function (title) {
  if (funcParsePageContent === true) {
  client.getArticle(title, function (err,e) {
    content = e
  })
}else{
  console.log("[projectpedia-js] Selon la configuration, la classe parsePageContent(), et donc implicitement la classe a été désactivée.")
}
}

exports.getPageContent = function () {
  if (funcParsePageContent === true) {
  return content
}else{
  console.log("[projectpedia-js] Selon la configuration, la classe parsePageContent(), et donc implicitement la classe getPageContent() ont été désactivées.")
}
}

exports.parsePages = function() {
  if (funcParsePages === true) {
  GetAllPages()
}else{
  console.log("[projectpedia-js] Selon la configuration, la classe parsePages() a été désactivée.")
}
}

exports.parseNamespacePages = function(namespace) {
  if (funcParseNamespacePages === true) {
  GetAllNamespacePages(namespace)
}else{
  console.log("[projectpedia-js] Selon la configuration, la classe parseNamespacePages() a été désactivée.")
}
}

exports.pages = function(answer) {
  if (funcParsePages === true) {
  var data = fs.readFileSync('temp');
  var preans = data.toString();
  fs.writeFile("temp", "", function(err) {if(err) {return console.log(err);}}); 
  answer = preans
  return answer
}else{
  console.log("[projectpedia-js] Selon la configuration, la classe parsePages(), et donc implicitement la classe pages() ont été désactivées.")
}
}

exports.pagesInNamespace = function(answer2) {
  if (funcParseNamespacePages === true) {
  var data2 = fs.readFileSync('temp');
  var preans2 = data2.toString();
  fs.writeFile("temp", "", function(err) {if(err) {return console.log(err);}}); 
  answer2 = preans2
  return answer2
}else{
  console.log("[projectpedia-js] Selon la configuration, la classe parseNamespacePages(), et donc implicitement la classe pagesInNamespace() ont été désactivées.")
}
}

function GetAllPages() {
client.getAllPages(function (err,e) {
  for(var key in e) {
      var list = new Array();
      var value = e[key];
      list.push(value);
      //console.log(list);
      var list2 = JSON.stringify(list);
      fs.appendFile("temp", list2 + "\n", function(err) {if(err) {return console.log(err);}}); 
      preans = list;
  }
})};

function GetAllNamespacePages(namespace) {
  client.getPagesInNamespace(namespace, function (err,e) {
    for(var key in e) {
        var list2 = new Array();
        var value = e[key];
        list2.push(value);
        //console.log(list);
        var list22 = JSON.stringify(list2);
        fs.appendFile("temp", list22 + "\n", function(err) {if(err) {return console.log(err);}}); 
        preans2 = list2;
    } 
  })};

function none() { try { if (err) console.error(err) }catch(err){} }
function loginOk() {
  if (configVerbose === true) {console.log("[projectpedia-js] Connexion établie");}
  none();
}

function getPages() {
  var preans = client.getAllPages(function (err,e) {
    for(var key in e) {
        var list = new Array();
        var value = e[key];
        list.push(value);
    }
    output = list;
    return list;
  });
  return preans;
}